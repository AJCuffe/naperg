# import Post, Car, CarCreateInput, CarWhereInput from "./generated/prisma.graphql"

type Query {
  me: User
  feed: [Post!]!
  drafts(orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  users: [User!]!
  singleUser(id: ID!): User
  post(id: ID!): Post
  car(where: CarWhereUniqueInput!): Car
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car]!



  # Only admins can retrieve info about given users
  user(id: ID!): User
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createDraft(title: String!, text: String, nameFile: String): Post
  updateUser(id: ID!, name: String, email: String, role: String): User
  deletePost(id: ID!): Post
  deleteUser(id: ID!): User
  publish(id: ID!): Post

  createCar(data: CarCreateInput!): Car!
  # createCar(name: String!): Car!
  deleteCar(where: CarWhereUniqueInput!): Car
  updateCar(data: CarUpdateInput!, where: CarWhereUniqueInput!): Car

  # Users can only update their own passwords
  # if `userId` is set, the user trying to update the password needs to be an admin
  updatePassword(oldPassword: String, newPassword: String!, userId: ID): User!

}

type AuthPayload {
  token: String!
  user: User!
}
